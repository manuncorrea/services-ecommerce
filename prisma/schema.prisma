// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String
  cpf           String     @unique
  address       String
  orders        Order[]
  favorites     Favorite[]
  addedProducts Product[]  @relation("AddedByRelation")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  images      String[]
  price       Float
  stock       Int
  isVisible   Boolean
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  brand       Brand       @relation(fields: [brandId], references: [id])
  brandId     String
  orderItems  OrderItem[]
  favorites   Favorite[]
  addedBy     User?       @relation("AddedByRelation", fields: [userId], references: [id], map: "addedByProductConstraint")
  userId      String?
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Order {
  id     String      @id @default(uuid())
  date   DateTime    @default(now())
  status OrderStatus
  items  OrderItem[]
  userId String
  user   User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

enum OrderStatus {
  PREPARING
  SHIPPED
  DELIVERED
  CANCELED
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Float
  validUntil DateTime
}

model Favorite {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}
